[tox]
envlist = mycustom1,mycustom2
skipsdist = false
skip_missing_interpreters = true
sdistsrc = /tmp/somedir

[lsr_config]
commands_pre = 
commands_post = 
lsr_enable = true

[testenv]
passenv = *
basepython = python3
changedir = {toxinidir}/tests
setenv = PYTHONPATH = {env:LSR_PYTHONPATH:}{toxinidir}/library:{toxinidir}/module_utils:{toxinidir}/filter_plugins
	LC_ALL = C.UTF-8
	SRC_MODULE_UTILS_DIR = {envsitepackagesdir}/ansible/module_utils
	DEST_MODULE_UTILS_DIR = {toxinidir}/module_utils
	TOXINIDIR = {toxinidir}
	LSR_SCRIPTDIR = {lsr_scriptdir}
	LSR_CONFIGDIR = {lsr_configdir}
	LSR_TOX_ENV_NAME = {envname}
	LSR_TOX_ENV_DIR = {envdir}
	LSR_ROLE2COLL_VERSION = main
	LSR_ROLE2COLL_NAMESPACE = fedora
	LSR_ROLE2COLL_NAME = linux_system_roles
	LSR_TOX_ENV_TMP_DIR = {envtmpdir}
	LSR_SRC_OWNER = {env:LSR_SRC_OWNER:linux-system-roles}
	LOCAL1 = local1
	LOCAL2 = local2
deps = py{26,27,36,37,38,39,310,311}: pytest-cov
	py{27,36,37,38,39,310,311}: pytest>=3.5.1
	py26: pytest
	py{26,27,36,37,38,39,310,311}: -rpytest_extra_requirements.txt
	localdep1
	localdep2
allowlist_externals = bash
	mkdir
	touch
commands = localcmd1
	localcmd2
ignore_outcome = true
suicide_timeout = 5.0
description = my local tox tests

[lsr_pytest]
configfile = {lsr_configdir}/pytest.ini

[testenv:py26]
install_command = pip install --index-url=file:///local_pypi_index/simple {opts} {packages}
list_dependencies_command = pip freeze
basepython = python2.6

[testenv:py27]
basepython = python2.7

[testenv:py36]
basepython = python3.6

[testenv:py37]
basepython = python3.7

[testenv:py38]
basepython = python3.8

[testenv:py39]
basepython = python3.9

[testenv:py310]
basepython = python3.10

[testenv:py311]
basepython = python3.11

[lsr_black]
configfile = {lsr_configdir}/black.toml

[testenv:black]
basepython = python3
passenv = RUN_BLACK_*
changedir = {toxinidir}
deps = black
commands = bash {lsr_scriptdir}/setup_module_utils.sh
	{[lsr_config]commands_pre}
	black --check --diff --config {env:RUN_BLACK_CONFIG_FILE:{[lsr_black]configfile}} \
	{env:RUN_BLACK_EXTRA_ARGS:} {posargs} .
	{[lsr_config]commands_post}

[lsr_pylint]
configfile = {lsr_configdir}/pylintrc

[testenv:pylint]
basepython = python3
passenv = RUN_PYLINT_*
changedir = {toxinidir}
deps = {env:LSR_PYLINT_ANSIBLE_DEP:ansible-core==2.11.*}
	colorama
	pylint>=1.8.4
	-rpylint_extra_requirements.txt
commands = bash {lsr_scriptdir}/setup_module_utils.sh
	{[lsr_config]commands_pre}
	bash {lsr_scriptdir}/runpylint.sh --errors-only \
	--rcfile {[lsr_pylint]configfile} {env:RUN_PYLINT_EXTRA_ARGS:} {posargs}
	{[lsr_config]commands_post}

[lsr_flake8]
configfile = {lsr_configdir}/flake8.ini

[testenv:flake8]
basepython = python3
passenv = RUN_FLAKE8_*
changedir = {env:LSR_RUN_TEST_DIR:{toxinidir}}
deps = flake8>=3.5
commands = bash {lsr_scriptdir}/setup_module_utils.sh
	{[lsr_config]commands_pre}
	python -m flake8 --config {env:RUN_FLAKE8_CONFIG_FILE:{[lsr_flake8]configfile}} \
	{env:RUN_FLAKE8_EXTRA_ARGS:} {posargs} .
	{[lsr_config]commands_post}
command = true

[lsr_yamllint]
configfile = {lsr_configdir}/yamllint.yml
configbasename = yamllint.yml
commands_pre = 

[testenv:yamllint]
changedir = {env:LSR_RUN_TEST_DIR:{toxinidir}}
deps = yamllint
commands = bash -c 'test -d {envtmpdir} || mkdir -p {envtmpdir}'
	cp {lsr_configdir}/yamllint_defaults.yml {[lsr_yamllint]configfile} {envtmpdir}
	sed -i "s,^extends: .*yamllint_defaults.yml$,extends: {envtmpdir}/yamllint_defaults.yml," {envtmpdir}/{[lsr_yamllint]configbasename}
	{[lsr_yamllint]commands_pre}
	yamllint -c {env:RUN_YAMLLINT_CONFIG_FILE:{envtmpdir}/{[lsr_yamllint]configbasename}} {env:RUN_YAMLLINT_EXTRA_ARGS:} {posargs} .
	{[lsr_config]commands_post}
allowlist_externals = bash
	cp
	sed

[coveralls]
commands = {[lsr_config]commands_pre}
	bash {lsr_scriptdir}/runcoveralls.sh {posargs}
	{[lsr_config]commands_post}

[testenv:coveralls]
deps = coveralls
commands = {[coveralls]commands}

[testenv:coveralls26]
deps = coverage==4.5.4
	coveralls==1.11.1
commands = {[coveralls]commands}

[molecule_common]
changedir = {toxinidir}
deps = {env:LSR_ANSIBLE_DEP:ansible}
	jmespath
	{env:LSR_MOLECULE_DRIVER:docker}{env:LSR_MOLECULE_DRIVER_VERSION:}
	molecule==3.*
	molecule[{env:LSR_MOLECULE_DRIVER:docker}]
	selinux
	wcwidth==0.1.9;python_version=="3.6"
	-rmolecule_extra_requirements.txt
runsyspycmd = {lsr_scriptdir}/runsyspycmd.sh

[testenv:molecule_version]
changedir = {[molecule_common]changedir}
deps = {[molecule_common]deps}
commands = bash {[molecule_common]runsyspycmd} molecule --version
	bash {[molecule_common]runsyspycmd} ansible --version

[testenv:molecule_test]
changedir = {[molecule_common]changedir}
deps = {[molecule_common]deps}
commands = bash {[molecule_common]runsyspycmd} \
	molecule test -s {env:LSR_MSCENARIO:default} {posargs}

[testenv:molecule]
changedir = {[molecule_common]changedir}
deps = {[molecule_common]deps}
commands = {[testenv:molecule_version]commands}
	{[testenv:molecule_test]commands}

[testenv:collection]
changedir = {toxinidir}
deps = jmespath
	ruamel.yaml
commands = bash {lsr_scriptdir}/runcollection.sh {env:LSR_ROLE2COLL_VERSION:main}

[testenv:shellcheck]
changedir = {env:LSR_RUN_TEST_DIR:{toxinidir}}
envdir = {toxworkdir}/env-shellcheck
commands = bash {lsr_scriptdir}/setup_module_utils.sh
	{[lsr_config]commands_pre}
	bash {lsr_scriptdir}/runshellcheck.sh
	{[lsr_config]commands_post}

[testenv:ansible-lint]
changedir = {toxinidir}
allowlist_externals = bash
deps = ansible-lint
commands_pre = bash {lsr_scriptdir}/ansible-lint-helper.sh pre
commands = bash {lsr_scriptdir}/setup_module_utils.sh
	{[lsr_config]commands_pre}
	ansible-lint {env:RUN_ANSIBLE_LINT_EXTRA_ARGS:} {posargs}
	{[lsr_config]commands_post}
commands_post = bash {lsr_scriptdir}/ansible-lint-helper.sh post

[testenv:ansible-lint-collection]
changedir = {toxworkdir}/ansible_collections/{env:LSR_ROLE2COLL_NAMESPACE}/{env:LSR_ROLE2COLL_NAME}
allowlist_externals = bash
	cp
deps = ansible-lint
commands = bash {lsr_scriptdir}/setup_module_utils.sh
	{[lsr_config]commands_pre}
	ansible-lint {env:RUN_ANSIBLE_LINT_EXTRA_ARGS:} {posargs}
	{[lsr_config]commands_post}

[testenv:ansible-test]
basepython = python3
deps = {env:LSR_ANSIBLE_TEST_DEP:ansible-core==2.16.*}
commands = bash {lsr_scriptdir}/runansible-test.sh

[testenv:woke]
changedir = {toxinidir}
commands = bash {lsr_scriptdir}/runwoke.sh

[testenv:codeql]
changedir = {toxinidir}
commands = bash {lsr_scriptdir}/runcodeql.sh

[qemu_common]
changedir = {toxinidir}
basepython = python3
setenv = {[testenv]setenv}
deps = fmf  # needed for standard-inventory-qcow2
	productmd  # needed for runqemu
	PyYAML  # needed for runqemu
	ruamel.yaml  # needed for collection support
	beautifulsoup4  # needed for centoshtml support
	selinux  # needed for delegate_to: localhost for file, copy, etc.
commands = python {lsr_scriptdir}/runqemu.py {posargs}

[testenv:qemu-ansible-2.9]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv = {[qemu_common]setenv}
	LSR_QEMU_ANSIBLE_CONTAINER = {env:LSR_QEMU_ANSIBLE_CONTAINER:quay.io/linux-system-roles/lsr_ansible_el7:latest}
deps = {[qemu_common]deps}
	ansible-core  # needed for ansible-config - not actually used to run ansible
commands = {[qemu_common]commands}

[testenv:qemu-ansible-core-2.11]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv = {[qemu_common]setenv}
deps = {[qemu_common]deps}
	ansible-core==2.11.*
commands = {[qemu_common]commands}

[testenv:qemu-ansible-core-2.12]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv = {[qemu_common]setenv}
deps = {[qemu_common]deps}
	ansible-core==2.12.*
commands = {[qemu_common]commands}

[testenv:qemu-ansible-core-2.13]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv = {[qemu_common]setenv}
deps = {[qemu_common]deps}
	ansible-core==2.13.*
commands = {[qemu_common]commands}

[testenv:qemu-ansible-core-2.14]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv = {[qemu_common]setenv}
deps = {[qemu_common]deps}
	ansible-core==2.14.*
commands = {[qemu_common]commands}

[testenv:qemu-ansible-core-2.15]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv = {[qemu_common]setenv}
deps = {[qemu_common]deps}
	ansible-core==2.15.*
commands = {[qemu_common]commands}

[testenv:qemu-ansible-core-2.16]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv = {[qemu_common]setenv}
deps = {[qemu_common]deps}
	ansible-core==2.16.*
commands = {[qemu_common]commands}

[testenv:ansible-plugin-scan]
changedir = {env:LSR_RUN_TEST_DIR:{toxinidir}}
basepython = python3
allowlist_externals = curl
	bash
deps = ansible==6.*
	jinja2==2.7.* ; python_version <= "3.7"
setenv = # change this to ANSIBLE_COLLECTIONS_PATH if using a later ansible version
	ANSIBLE_COLLECTIONS_PATHS = {envdir}
commands = curl -L -o {envdir}/report-modules-plugins.py https://raw.githubusercontent.com/{env:LSR_SRC_OWNER:linux-system-roles}/auto-maintenance/main/report-modules-plugins.py
	bash -c '\
	set -euxo pipefail; \
	for file in meta/collection-requirements.yml tests/collection-requirements.yml; do \
	if [ -f "$file" ]; then \
	ansible-galaxy collection install -vv --force -r "$file"; \
	fi; \
	done'
	python {env:LSR_REPORT_MODULES_PLUGINS:{envdir}/report-modules-plugins.py} \
	{env:RUN_PLUGIN_SCAN_EXTRA_ARGS:} --details {posargs} .

[testenv:ansible-managed-var-comment]
changedir = {toxinidir}
basepython = python3
allowlist_externals = grep
	echo
	bash
commands = bash {lsr_scriptdir}/check-ansible-managed.sh

[container_common]
changedir = {toxinidir}
basepython = python3
setenv = {[testenv]setenv}
commands = bash {lsr_scriptdir}/runcontainer.sh {posargs}

[testenv:container-ansible-2.9]
changedir = {[container_common]changedir}
basepython = {[container_common]basepython}
setenv = {[container_common]setenv}
deps = ansible==2.9.*
	jinja2==2.7.* ; python_version <= "3.7"
commands = {[container_common]commands}

[testenv:container-ansible-core-2.12]
changedir = {[container_common]changedir}
basepython = {[container_common]basepython}
setenv = {[container_common]setenv}
deps = ansible-core==2.12.*
commands = {[container_common]commands}

[testenv:container-ansible-core-2.13]
changedir = {[container_common]changedir}
basepython = {[container_common]basepython}
setenv = {[container_common]setenv}
deps = ansible-core==2.13.*
commands = {[container_common]commands}

[testenv:container-ansible-core-2.14]
changedir = {[container_common]changedir}
basepython = {[container_common]basepython}
setenv = {[container_common]setenv}
deps = ansible-core==2.14.*
commands = {[container_common]commands}

[testenv:container-ansible-core-2.15]
changedir = {[container_common]changedir}
basepython = {[container_common]basepython}
setenv = {[container_common]setenv}
deps = ansible-core==2.15.*
commands = {[container_common]commands}

[testenv:container-ansible-core-2.16]
changedir = {[container_common]changedir}
basepython = {[container_common]basepython}
setenv = {[container_common]setenv}
deps = ansible-core==2.16.*
commands = {[container_common]commands}

[testenv:markdownlint]
changedir = {toxinidir}
allowlist_externals = podman
	bash
	cat
	rm
setenv = {[testenv]setenv}
	INPUT_CONFIG=.markdownlint.yaml
	INPUT_FIX=true
commands = bash {lsr_scriptdir}/setup_module_utils.sh
	{[lsr_config]commands_pre}
	{env:LSR_CONTAINER_RUNTIME:podman} run --rm --privileged \
	-v {toxinidir}:/workdir --workdir /workdir \
	-e INPUT_CONFIG -e INPUT_FIX \
	docker://avtodev/markdown-lint:master \
	**/*.md --ignore=vendor \
	{env:RUN_MARKDOWNLINT_EXTRA_ARGS:} {posargs}
	{[lsr_config]commands_post}

[testenv:convert_readme]
changedir = {toxinidir}
allowlist_externals = podman
	bash
	cat
	rm
	sed
setenv = {[testenv]setenv}
commands = bash {lsr_scriptdir}/setup_module_utils.sh
	{[lsr_config]commands_pre}
	sed -i "1,8 \{/^\\\[\!.*actions\/workflows/d\}" README.md
	{env:LSR_CONTAINER_RUNTIME:podman} run --rm --privileged \
	-v {toxinidir}:/workdir --workdir /workdir \
	docker://pandoc/core:latest \
	--from gfm --to html5 --toc --shift-heading-level-by=-1 \
	--template .pandoc_template.html5 \
	--output README.html README.md \
	{env:RUN_CONVERT_README_EXTRA_ARGS:} {posargs}
	{[lsr_config]commands_post}

[testenv:build_ostree_image]
changedir = {toxinidir}
allowlist_externals = bash
	cat
	rm
	make
	sudo
setenv = {[testenv]setenv}
commands = bash {lsr_scriptdir}/build_ostree_image.sh {posargs}

[custom_common]
setenv = CUSTOMCOMMON = customcommon
commands = customcommoncmd
deps = customcommondep1
	customcommondep2

[testenv:mycustom1]
setenv = {[custom_common]setenv}
deps = {[custom_common]deps}
suicide_timeout = 10.0
description = mycustom1

[testenv:custom]
setenv = OVERRIDE_CUSTOM = override_custom
commands = override_custom_cmd
deps = override_custom_deps1
	override_custom_deps2

