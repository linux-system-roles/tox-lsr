#!/bin/bash
# SPDX-License-Identifier: MIT

# Run tox. Additionally, if LSR_MSCENARIOS is defined, run `tox -e molecule`
# for every scenario from LSR_MSCENARIOS and for every Ansible version from
# LSR_ANSIBLES.
#
# LSR_MSCENARIOS is a space separated list of molecule scenarios.
# LSR_ANSIBLES is a space separated list of Ansible package names with versions
# in pip format, i.e 'ansible ansible==2.8 ansible==2.9'.
#
# LSR_MSCENARIOS and LSR_ANSIBLES should be set as environment variables in the
# CI test runner config.
set -euo pipefail

# figure out where tox-lsr is installed
tox_lsr_path=$(pip show tox-lsr 2> /dev/null | awk '/^Location: / {print $2}')
SCRIPTDIR="$tox_lsr_path/tox_lsr/test_scripts"
BANNERSIZE=90

# LSR_MOLECULE_DRIVER_VERSION is the version string to pass
# to pip install - this is usually a comparison operator
# followed by a version number e.g. '<4.3' but in reality
# may be anything that pip allows to follow a package name
# in an install specification
if [ -z "${LSR_MOLECULE_DRIVER_VERSION:-}" ]; then
  if [ "${LSR_MOLECULE_DRIVER:-docker}" = docker ] && type docker > /dev/null 2>&1; then
    DOCKER_SERVER_API_VERSION=$(docker version --format '{{.Server.APIVersion}}')
    case "$DOCKER_SERVER_API_VERSION" in
    1.3[0-8]|1.[0-2]*) LSR_MOLECULE_DRIVER_VERSION='<4.3';;
    *) LSR_MOLECULE_DRIVER_VERSION="";;
    esac
  fi
fi
export LSR_MOLECULE_DRIVER_VERSION

. "$SCRIPTDIR/utils.sh"

lsr_banner tox "$BANNERSIZE"
(set -x; tox) || error_code="$?"

# Exit prematurely if the environment is not suitable for running
# Molecule tests.
if ! lsr_venv_python_matches_system_python; then
  exit "${error_code:-0}"
fi

if [ "${LSR_MSCENARIOS:-}" = SKIP ]; then
  lsr_info "Skipping molecule tests"
  exit "${error_code:-0}"
fi

if ! lsr_molecule_supports_ansible "${LSR_ANSIBLES:-}"; then
  lsr_info "WARNING: Molecule does not support Ansible versions ${LSR_ANSIBLES:-} - please use ansible==3.* or later, or use LSR_MSCENARIOS=SKIP"
  exit "${error_code:-0}"
fi

for ansible_dependency in ${LSR_ANSIBLES:-}; do
  for molecule_scenario in ${LSR_MSCENARIOS:-}; do
    lsr_banner \
      "[${ansible_dependency}] tox -e molecule -- -s ${molecule_scenario}" \
      "$BANNERSIZE"
    (
      set -x
      LSR_ANSIBLE_DEP="${ansible_dependency}" \
      LSR_MSCENARIO="$molecule_scenario" \
      tox -e molecule
    ) || error_code="$?"
  done
done

exit "${error_code:-0}"
