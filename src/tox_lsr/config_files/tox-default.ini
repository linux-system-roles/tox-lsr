# SPDX-License-Identifier: MIT
[tox]
envlist =
    black, pylint, flake8, yamllint
    py{26,27,36,37,38}, shellcheck
    collection, ansible-lint, custom
    ansible-test
skipsdist = true
skip_missing_interpreters = true

[lsr_config]
commands_pre =
commands_post =

[testenv]
passenv = *
basepython = python3
changedir = {toxinidir}/tests
setenv =
    PYTHONPATH = {env:LSR_PYTHONPATH:}{toxinidir}/library:{toxinidir}/module_utils
    LC_ALL = C.UTF-8
    SRC_MODULE_UTILS_DIR = {envsitepackagesdir}/ansible/module_utils
    DEST_MODULE_UTILS_DIR = {toxinidir}/module_utils
    TOXINIDIR = {toxinidir}
    LSR_SCRIPTDIR = {lsr_scriptdir}
    LSR_CONFIGDIR = {lsr_configdir}
    LSR_TOX_ENV_NAME = {envname}
    LSR_TOX_ENV_DIR = {envdir}
    LSR_ROLE2COLL_VERSION = master
    LSR_ROLE2COLL_NAMESPACE = fedora
    LSR_ROLE2COLL_NAME = linux_system_roles
deps =
    py{26,27,36,37,38}: pytest-cov
    py{27,36,37,38}: pytest>=3.5.1
    py26: pytest
    py{26,27,36,37,38}: -rpytest_extra_requirements.txt
whitelist_externals =
    bash
commands =
    bash {lsr_scriptdir}/setup_module_utils.sh
    {[lsr_config]commands_pre}
    bash -c 'if [ -d {env:RUN_PYTEST_UNIT_DIR:unit} ]; then \
        python -m pytest -c {[lsr_pytest]configfile} --durations=5 \
        --cov={toxinidir}/library --cov={toxinidir}/module_utils \
        --cov-report=html:htmlcov-{envname} \
        --cov-report=term {env:RUN_PYTEST_EXTRA_ARGS:} {posargs} {env:RUN_PYTEST_UNIT_DIR:unit} ; \
        fi'
    {[lsr_config]commands_post}

[lsr_pytest]
configfile = {lsr_configdir}/pytest.ini

[testenv:py26]
install_command =
    pip install {opts} {packages}
list_dependencies_command =
    pip freeze
basepython = python2.6

[testenv:py27]
basepython = python2.7

[testenv:py36]
basepython = python3.6

[testenv:py37]
basepython = python3.7

[testenv:py38]
basepython = python3.8

[testenv:py39]
basepython = python3.9

[lsr_black]
configfile = {lsr_configdir}/black.toml

[testenv:black]
basepython = python3
passenv = RUN_BLACK_*
changedir = {toxinidir}
deps =
    black
commands =
    bash {lsr_scriptdir}/setup_module_utils.sh
    {[lsr_config]commands_pre}
    black --check --diff --config {env:RUN_BLACK_CONFIG_FILE:{[lsr_black]configfile}} \
        {env:RUN_BLACK_EXTRA_ARGS:} {posargs} .
    {[lsr_config]commands_post}

[lsr_pylint]
configfile = {lsr_configdir}/pylintrc

[testenv:pylint]
basepython = python2.7
passenv = RUN_PYLINT_*
changedir = {toxinidir}
deps =
    ansible==2.11.*
    colorama
    pylint>=1.8.4
    -rpylint_extra_requirements.txt
commands =
    bash {lsr_scriptdir}/setup_module_utils.sh
    {[lsr_config]commands_pre}
    bash {lsr_scriptdir}/runpylint.sh --errors-only \
        --rcfile {[lsr_pylint]configfile} {env:RUN_PYLINT_EXTRA_ARGS:} {posargs}
    {[lsr_config]commands_post}

[lsr_flake8]
configfile = {lsr_configdir}/flake8.ini

[testenv:flake8]
basepython = python2.7
passenv = RUN_FLAKE8_*
changedir = {toxinidir}
deps =
    flake8>=3.5
commands =
    bash {lsr_scriptdir}/setup_module_utils.sh
    {[lsr_config]commands_pre}
    python -m flake8 --config {env:RUN_FLAKE8_CONFIG_FILE:{[lsr_flake8]configfile}} \
        {env:RUN_FLAKE8_EXTRA_ARGS:} {posargs} .
    {[lsr_config]commands_post}

[lsr_yamllint]
configfile = {lsr_configdir}/yamllint.yml
configbasename = yamllint.yml
commands_pre =

[testenv:yamllint]
changedir = {toxinidir}
deps = yamllint
commands =
    bash -c 'test -d {envtmpdir} || mkdir -p {envtmpdir}'
    cp {lsr_configdir}/yamllint_defaults.yml {[lsr_yamllint]configfile} {envtmpdir}
    sed -i "s,^extends: .*yamllint_defaults.yml$,extends: {envtmpdir}/yamllint_defaults.yml," {envtmpdir}/{[lsr_yamllint]configbasename}
    {[lsr_yamllint]commands_pre}
    yamllint -c {env:RUN_YAMLLINT_CONFIG_FILE:{envtmpdir}/{[lsr_yamllint]configbasename}} {env:RUN_YAMLLINT_EXTRA_ARGS:} {posargs} .
    {[lsr_config]commands_post}
whitelist_externals =
    bash
    cp
    sed

[coveralls]
commands =
    {[lsr_config]commands_pre}
    bash {lsr_scriptdir}/runcoveralls.sh {posargs}
    {[lsr_config]commands_post}

[testenv:coveralls]
deps =
    coveralls
commands = {[coveralls]commands}

[testenv:coveralls26]
deps =
    coverage==4.5.4
    coveralls==1.11.1
commands = {[coveralls]commands}

# By default molecule will use docker as the driver - set the env. var.
# LSR_MOLECULE_DRIVER=podman to use podman instead
# if you need to specify a different version of the pypi driver
# package e.g. to workaround the docker server api 1.39
# incompatibility, use LSR_MOLECULE_DRIVER_VERSION='<4.3'
[molecule_common]
changedir = {toxinidir}
deps =
    {env:LSR_ANSIBLE_DEP:ansible}
    jmespath
    {env:LSR_MOLECULE_DRIVER:docker}{env:LSR_MOLECULE_DRIVER_VERSION:}
    molecule==3.*
    molecule[{env:LSR_MOLECULE_DRIVER:docker}]
    selinux
    wcwidth==0.1.9;python_version=="3.6"
    -rmolecule_extra_requirements.txt
runsyspycmd = {lsr_scriptdir}/runsyspycmd.sh

[testenv:molecule_version]
changedir = {[molecule_common]changedir}
deps =
    {[molecule_common]deps}
commands =
    bash {[molecule_common]runsyspycmd} molecule --version
    bash {[molecule_common]runsyspycmd} ansible --version

[testenv:molecule_test]
changedir = {[molecule_common]changedir}
deps =
    {[molecule_common]deps}
commands =
    bash {[molecule_common]runsyspycmd} \
         molecule test -s {env:LSR_MSCENARIO:default} {posargs}

[testenv:molecule]
changedir = {[molecule_common]changedir}
deps =
    {[molecule_common]deps}
commands =
    {[testenv:molecule_version]commands}
    {[testenv:molecule_test]commands}

[testenv:collection]
changedir = {toxinidir}
deps =
    jmespath
    ruamel.yaml
commands =
    bash {lsr_scriptdir}/runcollection.sh {env:LSR_ROLE2COLL_VERSION:master}

[testenv:custom]
changedir = {toxinidir}
deps =
    -rcustom_requirements.txt
commands =
    bash -c 'if [ -f {toxinidir}/.travis/custom.sh ]; then bash {toxinidir}/.travis/custom.sh; fi'

[testenv:shellcheck]
changedir = {toxinidir}
envdir = {toxworkdir}/env-shellcheck
commands =
    bash {lsr_scriptdir}/setup_module_utils.sh
    {[lsr_config]commands_pre}
    bash {lsr_scriptdir}/runshellcheck.sh
    {[lsr_config]commands_post}

[lsr_ansible-lint]
configfile = {lsr_configdir}/ansible-lint.yml

[testenv:ansible-lint]
changedir = {toxinidir}
deps =
    ansible==2.10.*
    ansible-lint==4.3.5
commands =
    bash {lsr_scriptdir}/setup_module_utils.sh
    {[lsr_config]commands_pre}
    ansible-lint -v --exclude=tests/roles -c {[lsr_ansible-lint]configfile} \
        {env:RUN_ANSIBLE_LINT_EXTRA_ARGS:} {posargs}
    {[lsr_config]commands_post}

[testenv:ansible-test]
# NOTE: ansible-test in ansible 2.9 seems to become confused
# when running in a venv that uses basepython 3.9 or later
# ansible 2.10 seems better in this respect
basepython = python3
deps =
    ansible==2.9.*
commands =
    bash {lsr_scriptdir}/runansible-test.sh

[qemu_common]
changedir = {toxinidir}
basepython = python3
setenv =
    {[testenv]setenv}
deps =
    jinja2==2.7.*  # want to ensure things work on jinja 2.7
    jmespath
    productmd  # needed for runqemu
    PyYAML  # needed for runqemu
    ruamel.yaml  # needed for collection support
commands =
    python {lsr_scriptdir}/runqemu.py {posargs}

[testenv:qemu]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv =
    {[qemu_common]setenv}
deps =
    {[qemu_common]deps}
    ansible==2.9.*
commands =
    {[qemu_common]commands}

[testenv:qemu-ansible-core-2.11]
changedir = {[qemu_common]changedir}
basepython = {[qemu_common]basepython}
setenv =
    {[qemu_common]setenv}
deps =
    {[qemu_common]deps}
    ansible-core==2.11.*
commands =
    {[qemu_common]commands}
